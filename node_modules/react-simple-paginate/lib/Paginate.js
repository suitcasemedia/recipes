'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var React = require('react');
var update = require('react-addons-update');

var Paginate = React.createClass({
  displayName: 'Paginate',

  getDefaultProps: function getDefaultProps() {
    return {
      prevLabel: "previous",
      nextLabel: "next",
      offset: 0,
      limit: 10,
      pageClassName: "pagination-link",
      containerClassName: "pagination-container",
      centerPagesCount: 5,
      cornerPagesCount: 2,
      leftMarker: "...",
      rightMarker: "..."
    };
  },

  getInitialState: function getInitialState() {
    return {
      'currentPage': (Math.max(Math.ceil(this.props.offset / this.props.limit)), 1),
      'pages': this.pages(),
      'initialPages': [],
      'centerPages': [],
      'finalPages': [],
      'showLeftMarker': false,
      'showRightMarker': false
    };
  },

  componentDidMount: function componentDidMount() {
    this.updateLinks();
  },

  updateLinks: function updateLinks() {
    var cornerLinkLimit = this.props.cornerPagesCount;
    var pages = this.state.pages;
    var count = pages.length;
    var currentPage = this.state.currentPage;
    var initialPages = pages.slice(0, cornerLinkLimit);
    var finalPages = pages.slice(Math.max(cornerLinkLimit, count - cornerLinkLimit), count);
    var centerStartIndex = Math.max(cornerLinkLimit, currentPage - this.props.centerPagesCount);
    var centerEndIndex = Math.min(currentPage + this.props.centerPagesCount, count - cornerLinkLimit);
    var showLeftMarker = centerStartIndex > cornerLinkLimit;
    var showRightMarker = centerEndIndex < count - cornerLinkLimit - 1;
    var centerPages = pages.slice(centerStartIndex, centerEndIndex);

    this.setState(update(this.state, {
      $set: { 'initialPages': initialPages,
        'finalPages': finalPages,
        'centerPages': centerPages,
        'showLeftMarker': showLeftMarker,
        'showRightMarker': showRightMarker }
    }));
  },

  pages: function pages() {
    var pageCount = Math.ceil(this.props.total / this.props.limit);
    var pages = [];
    for (var i = 1; i <= pageCount; i++) {
      pages.push(i);
    }
    return pages;
  },

  onClick: function onClick(pageNumber) {
    var self = this;
    this.setState(update(this.state, {
      $set: { 'currentPage': pageNumber }
    }), function () {
      self.updateLinks();
      self.props.handler((pageNumber - 1) * this.props.limit);
    });
  },

  render: function render() {
    var _this = this;

    var prevLink = undefined;
    var nextLink = undefined;
    var self = this;
    var lastPage = this.state.pages[this.state.pages.length - 1];
    var leftMarker = "";
    var rightMarker = "";

    if (this.state.currentPage > 1) {
      prevLink = React.createElement(
        'li',
        { className: this.props.pageClassName + (this.state.currentPage == 0 ? " " + this.props.currentPageClassName : ""), key: 0 },
        React.createElement(
          'a',
          { onClick: function (event) {
              return self.onClick(_this.state.currentPage - 1);
            }, href: 'javascript:void(0)' },
          ' ',
          this.props.prevLabel
        )
      );
    } else {
      prevLink = "";
    }

    if (this.state.showLeftMarker) {
      leftMarker = React.createElement(
        'li',
        { className: 'left-marker' },
        this.props.leftMarker
      );
    }

    if (this.state.showRightMarker) {
      rightMarker = React.createElement(
        'li',
        { className: 'right-marker' },
        this.props.rightMarker
      );
    }

    if (this.state.currentPage < lastPage) {
      nextLink = React.createElement(
        'li',
        { className: this.props.pageClassName + (this.state.currentPage == lastPage ? " " + this.props.currentPageClassName : ""), key: lastPage + 1 },
        React.createElement(
          'a',
          { onClick: function (event) {
              return self.onClick(_this.state.currentPage + 1);
            }, href: 'javascript:void(0)' },
          ' ',
          this.props.nextLabel
        )
      );
    } else {
      nextLink = "";
    }
    return React.createElement(
      'ul',
      { className: this.props.containerClassName },
      prevLink,
      this.state.initialPages.map(function (pageNumber, idx) {
        return React.createElement(
          'li',
          { className: self.props.pageClassName + (self.state.currentPage == pageNumber ? " " + self.props.currentPageClassName : ""), key: idx },
          React.createElement(
            'a',
            { onClick: function (event) {
                return self.onClick(pageNumber);
              }, href: 'javascript:void(0)' },
            ' ',
            pageNumber
          )
        );
      }),
      leftMarker,
      this.state.centerPages.map(function (pageNumber, idx) {
        return React.createElement(
          'li',
          { className: self.props.pageClassName + (self.state.currentPage == pageNumber ? " " + self.props.currentPageClassName : ""), key: idx },
          React.createElement(
            'a',
            { onClick: function (event) {
                return self.onClick(pageNumber);
              }, href: 'javascript:void(0)' },
            ' ',
            pageNumber
          )
        );
      }),
      rightMarker,
      this.state.finalPages.map(function (pageNumber, idx) {
        return React.createElement(
          'li',
          { className: self.props.pageClassName + (self.state.currentPage == pageNumber ? " " + self.props.currentPageClassName : ""), key: idx },
          React.createElement(
            'a',
            { onClick: function (event) {
                return self.onClick(pageNumber);
              }, href: 'javascript:void(0)' },
            ' ',
            pageNumber
          )
        );
      }),
      nextLink
    );
  }
});

exports['default'] = Paginate;
module.exports = exports['default'];